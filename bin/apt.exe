local args = {...}
local cmd = args[1]
local pkg = args[2]
local rebuild = false

local function readJSON(path)
    if not fs.exists(path) then return nil end
    local f = fs.open(path, "r")
    local content = f.readAll()
    f.close()
    local ok, data = pcall(textutils.unserializeJSON, content)
    if ok then return data end
    return nil
end

local function copyFile(src, dest)
    local f = fs.open(src, "rb")
    local content = f.readAll()
    f.close()
    local f2 = fs.open(dest, "wb")
    f2.write(content)
    f2.close()
end

local function getDiskRoot()
    local path = shell.getRunningProgram() or ""
    local disk = path:match("^/(disk%d+)/")
    if disk then return "/"..disk end
    return nil
end

local DISK_ROOT = getDiskRoot()
if not DISK_ROOT then print("Error: could not detect running disk") return end

local APT_PATH = fs.combine(DISK_ROOT, "etc/apt")
local PACKAGES_PATH = fs.combine(APT_PATH, "packages")
local INSTALLED_PATH = fs.combine(APT_PATH, "installed")
local BIN_PATH = fs.combine(DISK_ROOT, "bin")
local APPS_PATH = fs.combine(DISK_ROOT, "apps")

if not fs.exists(BIN_PATH) then fs.makeDir(BIN_PATH) end
if not fs.exists(APPS_PATH) then fs.makeDir(APPS_PATH) end

local function copyPackageFiles(pkgPath)
    local meta = readJSON(fs.combine(pkgPath, "package.json"))
    if not meta then return false end
    for _, f in ipairs(fs.list(pkgPath)) do
        local fullPath = fs.combine(pkgPath, f)
        if meta.binary and f:match("%.exe$") then copyFile(fullPath, fs.combine(BIN_PATH, f)) end
        if meta.app and f:match("%.lua$") then copyFile(fullPath, fs.combine(APPS_PATH, f)) end
    end
    return true
end

local apt = {}

function apt.checkinstall(pkg)
    return fs.exists(fs.combine(INSTALLED_PATH, pkg))
end

function apt.install(pkg)
    if not fs.exists(PACKAGES_PATH) then return false end
    local pkgPath = fs.combine(PACKAGES_PATH, pkg)
    if not fs.exists(pkgPath) then return false end
    if not fs.exists(INSTALLED_PATH) then fs.makeDir(INSTALLED_PATH) end
    local installedPkgPath = fs.combine(INSTALLED_PATH, pkg)
    if not fs.exists(installedPkgPath) then fs.makeDir(installedPkgPath) end
    if fs.exists(fs.combine(pkgPath, "package.json")) then
        copyFile(fs.combine(pkgPath, "package.json"), fs.combine(installedPkgPath, "package.json"))
    end
    if copyPackageFiles(pkgPath) then return true end
    return false
end

function apt.uninstall(pkg)
    local installedPkgPath = fs.combine(INSTALLED_PATH, pkg)
    if not fs.exists(installedPkgPath) then return false end
    local function deleteRecursive(path)
        for _, f in ipairs(fs.list(path)) do
            local full = fs.combine(path, f)
            if fs.isDir(full) then deleteRecursive(full) else fs.delete(full) end
        end
        fs.delete(path)
    end
    deleteRecursive(installedPkgPath)
    return true
end

function apt.listInstalled()
    if not fs.exists(INSTALLED_PATH) then return {} end
    return fs.list(INSTALLED_PATH)
end

function apt.listAvailable()
    if not fs.exists(PACKAGES_PATH) then return {} end
    return fs.list(PACKAGES_PATH)
end

function apt.rebuildSystem()
    for _, pkg in ipairs(apt.listInstalled()) do
        local pkgPath = fs.combine(INSTALLED_PATH, pkg)
        if fs.exists(pkgPath) then copyPackageFiles(pkgPath) end
    end
end

function apt.scanPackages()
    local found = {}
    if fs.exists(PACKAGES_PATH) then
        for _, pkg in ipairs(fs.list(PACKAGES_PATH)) do
            table.insert(found, pkg.." (from packages)")
        end
    end
    return found
end

if cmd == "install" and pkg then
    if apt.checkinstall(pkg) then
        print("Already installed: "..pkg)
    elseif apt.install(pkg) then
        print("Package installed: "..pkg)
        rebuild = true
    else
        print("Package not found or missing package.json: "..pkg)
    end
elseif cmd == "remove" and pkg then
    if apt.uninstall(pkg) then
        print("Package removed: "..pkg)
        rebuild = true
    else
        print("Package not installed: "..pkg)
    end
elseif cmd == "list-installed" then
    for _, p in ipairs(apt.listInstalled()) do print(p) end
elseif cmd == "list-available" then
    for _, p in ipairs(apt.listAvailable()) do print(p) end
elseif cmd == "rebuild" then
    apt.rebuildSystem()
    print("System rebuilt from installed packages")
elseif cmd == "scan" then
    for _, p in ipairs(apt.scanPackages()) do print(p) end
else
    print("Usage: apt <install|remove|list-installed|list-available|rebuild|scan> <package>")
end

if rebuild then
    apt.rebuildSystem()
end
