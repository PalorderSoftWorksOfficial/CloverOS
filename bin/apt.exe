local args = {...}
local cmd = args[1]
local pkg = args[2]
local rebuild = false

local function readJSON(path)
    if not fs.exists(path) then return nil end
    local f = fs.open(path,"r")
    local content = f.readAll()
    f.close()
    local ok, data = pcall(textutils.unserializeJSON, content)
    if ok then return data end
    return nil
end

local function copyFile(src,dest)
    local f = fs.open(src,"rb")
    local content = f.readAll()
    f.close()
    local f2 = fs.open(dest,"wb")
    f2.write(content)
    f2.close()
end

local function findAptFolder()
    for i=0,99 do
        local diskPath = "/disk"..i.."/etc/apt"
        if fs.exists(diskPath) then return diskPath end
    end
    return "/etc/apt"
end

local APT_PATH = findAptFolder()
if not fs.exists(APT_PATH) then
    fs.makeDir(APT_PATH)
    fs.makeDir(APT_PATH.."/packages")
    fs.makeDir(APT_PATH.."/installed")
end

local function copyPackageFiles(pkgPath)
    local meta = readJSON(fs.combine(pkgPath,"package.json"))
    if not meta then return false end
    if not fs.exists("/bin") then fs.makeDir("/bin") end
    if not fs.exists("/apps") then fs.makeDir("/apps") end

    for _,f in ipairs(fs.list(pkgPath)) do
        local fullPath = fs.combine(pkgPath,f)
        if meta.binary and f:match("%.exe$") then copyFile(fullPath, fs.combine("/bin",f)) end
        if meta.app and f:match("%.lua$") then copyFile(fullPath, fs.combine("/apps",f)) end
    end
    return true
end

local apt = {}

function apt.checkinstall(pkg)
    return fs.exists(fs.combine(APT_PATH.."/installed",pkg))
end

function apt.install(pkg)
    local pkgPath = nil
    -- Check all disks first
    for i=0,99 do
        local diskPath = "/disk"..i.."/etc/apt/packages/"..pkg
        if fs.exists(diskPath) then pkgPath = diskPath break end
    end
    -- Check current APT_PATH packages
    if not pkgPath then
        local path = fs.combine(APT_PATH.."/packages",pkg)
        if fs.exists(path) then pkgPath = path end
    end
    if not pkgPath then return false end

    local installedPath = fs.combine(APT_PATH.."/installed",pkg)
    if not fs.exists(APT_PATH.."/installed") then fs.makeDir(APT_PATH.."/installed") end
    if not fs.exists(installedPath) then fs.makeDir(installedPath) end

    -- Copy package.json into installed folder
    if fs.exists(fs.combine(pkgPath,"package.json")) then
        copyFile(fs.combine(pkgPath,"package.json"), fs.combine(installedPath,"package.json"))
    end

    if copyPackageFiles(pkgPath) then
        return true
    end
    return false
end

function apt.uninstall(pkg)
    local installedPath = fs.combine(APT_PATH.."/installed",pkg)
    if not fs.exists(installedPath) then return false end
    local function deleteRecursive(path)
        for _, f in ipairs(fs.list(path)) do
            local full = fs.combine(path,f)
            if fs.isDir(full) then deleteRecursive(full) else fs.delete(full) end
        end
        fs.delete(path)
    end
    deleteRecursive(installedPath)
    return true
end

function apt.listInstalled()
    if not fs.exists(APT_PATH.."/installed") then return {} end
    return fs.list(APT_PATH.."/installed")
end

function apt.listAvailable()
    local pkgs = {}
    if fs.exists(APT_PATH.."/packages") then
        for _, p in ipairs(fs.list(APT_PATH.."/packages")) do table.insert(pkgs,p) end
    end
    for i=0,99 do
        local diskPath = "/disk"..i.."/etc/apt/packages"
        if fs.exists(diskPath) then
            for _, p in ipairs(fs.list(diskPath)) do
                if not table.find(pkgs,p) then table.insert(pkgs,p) end
            end
        end
    end
    return pkgs
end

function apt.rebuildSystem()
    for _, pkg in ipairs(apt.listInstalled()) do
        local pkgPath = fs.combine(APT_PATH.."/installed",pkg)
        if fs.exists(pkgPath) then copyPackageFiles(pkgPath) end
    end
end

function apt.scanPackages()
    local found = {}
    for i=0,99 do
        local diskPath = "/disk"..i.."/etc/apt/packages"
        if fs.exists(diskPath) then
            for _, pkg in ipairs(fs.list(diskPath)) do
                table.insert(found, pkg.." (from disk"..i..")")
            end
        end
    end
    if fs.exists(APT_PATH.."/packages") then
        for _, pkg in ipairs(fs.list(APT_PATH.."/packages")) do
            table.insert(found, pkg.." (from APT_PATH)")
        end
    end
    return found
end

if cmd == "install" and pkg then
    if apt.checkinstall(pkg) then print("Already installed: "..pkg)
    elseif apt.install(pkg) then print("Package installed: "..pkg) rebuild = true
    else print("Package not found or missing package.json: "..pkg)
    end
elseif cmd == "remove" and pkg then
    if apt.uninstall(pkg) then print("Package removed: "..pkg) rebuild = true
    else print("Package not installed: "..pkg)
    end
elseif cmd == "list-installed" then
    for _, p in ipairs(apt.listInstalled()) do print(p) end
elseif cmd == "list-available" then
    for _, p in ipairs(apt.listAvailable()) do print(p) end
elseif cmd == "rebuild" then
    apt.rebuildSystem()
    print("System rebuilt from installed packages")
elseif cmd == "scan" then
    for _, p in ipairs(apt.scanPackages()) do print(p) end
else
    print("Usage: apt <install|remove|list-installed|list-available|rebuild|scan> <package>")
end

if rebuild then
    print("Reloading system files from installed packages")
    apt.rebuildSystem()
end
